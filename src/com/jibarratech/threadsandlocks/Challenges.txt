


Design a class which provides a lock only if there are no possible deadlocks.

Suppose we have the following code:
public class Foo {
    public Foo() { ... }
    public void first() { ... }
    public void secondQ { ... }
    public void thirdQ { ... }
}
The same instance of Foo will be passed to three different threads. ThreadA will call first, threadB will call second, and threadC will call third. Design a mechanism to ensure that first is called before second and second is called before third .

You are given a class with synchronized method A and a normal method B. If you have two threads in one instance of a program, can they both execute A at the same time? Can they execute A and B at the same time?